//
//  Define.swift
//  Bitboard
//
//  Created by usagi on 2021/09/20.
//

import Foundation
import BigInt

//
// MARK: 
//

internal let Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

/// 方向
internal enum Direction {
    // 縦
    case rank;
    // 横
    case file;
    // 斜め
//    case diagonal;
}

/// 回転角度
public enum Digree: Int {
    
    case d0 = 0
    case d45 = 45
    case d90 = 90
    case d135 = 135
    case d180 = 180
    case d225 = 125
    case d270 = 270
    case d315 = 315
    case d360 = 360
    
    static prefix func - (x: Self) -> Digree {
        switch x {
        case .d0:   return .d360
        case .d45:  return .d315
        case .d90:  return .d270
        case .d135: return .d225
        case .d180: return .d180
        case .d225: return .d135
        case .d270: return .d90
        case .d315: return .d45
        case .d360: return .d0
        }
    }
    
    static func + (lhs: Self, rhs: Self) -> Digree {
        let digree = (lhs.rawValue + rhs.rawValue)
        return Digree(rawValue: digree % 360)!
    }
    
    static func - (lhs: Self, rhs: Self) -> Digree {
        let digree = abs(lhs.rawValue - rhs.rawValue)
        return Digree(rawValue: digree % 360)!
    }
    
    static func += (lhs: inout Self, rhs: Self) {
        lhs = lhs + rhs
    }
    
    static func -= (lhs: inout Self, rhs: Self) {
        lhs = lhs - rhs
    }
}

/// global
internal struct g {
    static var lookUpTable = LookUpTable.init()
}

//
// MARK: bit pattern
//

let B00000000000000000000000000 = BigUInt("00000000000000000000000000", radix: 2)!;

let B00000000000000000000000001 = BigUInt("00000000000000000000000001", radix: 2)!;
let B00000000000000000000000011 = BigUInt("00000000000000000000000011", radix: 2)!;
let B00000000000000000000000111 = BigUInt("00000000000000000000000111", radix: 2)!;
let B00000000000000000000001111 = BigUInt("00000000000000000000001111", radix: 2)!;
let B00000000000000000000011111 = BigUInt("00000000000000000000011111", radix: 2)!;
let B00000000000000000000111111 = BigUInt("00000000000000000000111111", radix: 2)!;
let B00000000000000000001111111 = BigUInt("00000000000000000001111111", radix: 2)!;
let B00000000000000000011111111 = BigUInt("00000000000000000011111111", radix: 2)!;
let B00000000000000000111111111 = BigUInt("00000000000000000111111111", radix: 2)!;
let B00000000000000001111111111 = BigUInt("00000000000000001111111111", radix: 2)!;
let B00000000000000011111111111 = BigUInt("00000000000000011111111111", radix: 2)!;
let B00000000000000111111111111 = BigUInt("00000000000000111111111111", radix: 2)!;
let B00000000000001111111111111 = BigUInt("00000000000001111111111111", radix: 2)!;
let B00000000000011111111111111 = BigUInt("00000000000011111111111111", radix: 2)!;
let B00000000000111111111111111 = BigUInt("00000000000111111111111111", radix: 2)!;
let B00000000001111111111111111 = BigUInt("00000000001111111111111111", radix: 2)!;
let B00000000011111111111111111 = BigUInt("00000000011111111111111111", radix: 2)!;
let B00000000111111111111111111 = BigUInt("00000000111111111111111111", radix: 2)!;
let B00000001111111111111111111 = BigUInt("00000001111111111111111111", radix: 2)!;
let B00000011111111111111111111 = BigUInt("00000011111111111111111111", radix: 2)!;
let B00000111111111111111111111 = BigUInt("00000111111111111111111111", radix: 2)!;
let B00001111111111111111111111 = BigUInt("00001111111111111111111111", radix: 2)!;
let B00011111111111111111111111 = BigUInt("00011111111111111111111111", radix: 2)!;
let B00111111111111111111111111 = BigUInt("00111111111111111111111111", radix: 2)!;
let B01111111111111111111111111 = BigUInt("01111111111111111111111111", radix: 2)!;
let B11111111111111111111111111 = BigUInt("11111111111111111111111111", radix: 2)!;

let X0000001 = B00000000000000000000000001
let X0000003 = B00000000000000000000000011
let X0000007 = B00000000000000000000000111
let X000000F = B00000000000000000000001111
let X000001F = B00000000000000000000011111
let X000003F = B00000000000000000000111111
let X000007F = B00000000000000000001111111
let X00000FF = B00000000000000000011111111
let X00001FF = B00000000000000000111111111
let X00003FF = B00000000000000001111111111
let X00007FF = B00000000000000011111111111
let X0000FFF = B00000000000000111111111111
let X0001FFF = B00000000000001111111111111
let X0003FFF = B00000000000011111111111111
let X0007FFF = B00000000000111111111111111
let X000FFFF = B00000000001111111111111111
let X001FFFF = B00000000011111111111111111
let X003FFFF = B00000000111111111111111111
let X007FFFF = B00000001111111111111111111
let X00FFFFF = B00000011111111111111111111
let X01FFFFF = B00000111111111111111111111
let X03FFFFF = B00001111111111111111111111
let X07FFFFF = B00011111111111111111111111
let X0FFFFFF = B00111111111111111111111111
let X1FFFFFF = B01111111111111111111111111
let X3FFFFFF = B11111111111111111111111111

let B11001100110011001100110011 = BigUInt("11001100110011001100110011", radix: 2)!; // 0x33..
let B01010101010101010101010101 = BigUInt("01010101010101010101010101", radix: 2)!; // 0x55..
let B00110011001100110011001100 = BigUInt("00110011001100110011001100", radix: 2)!; // 0xCC..
let B10101010101010101010101010 = BigUInt("10101010101010101010101010", radix: 2)!; // 0xAA..

let B00000000000000000000000010 = BigUInt("00000000000000000000000010", radix: 2)!;
let B00000000000000000000000100 = BigUInt("00000000000000000000000100", radix: 2)!;
let B00000000000000000000001000 = BigUInt("00000000000000000000001000", radix: 2)!;
let B00000000000000000000010000 = BigUInt("00000000000000000000010000", radix: 2)!;
let B00000000000000000000100000 = BigUInt("00000000000000000000100000", radix: 2)!;
let B00000000000000000001000000 = BigUInt("00000000000000000001000000", radix: 2)!;
let B00000000000000000010000000 = BigUInt("00000000000000000010000000", radix: 2)!;
let B00000000000000000100000000 = BigUInt("00000000000000000100000000", radix: 2)!;
let B00000000000000001000000000 = BigUInt("00000000000000001000000000", radix: 2)!;
let B00000000000000010000000000 = BigUInt("00000000000000010000000000", radix: 2)!;
let B00000000000000100000000000 = BigUInt("00000000000000100000000000", radix: 2)!;
let B00000000000001000000000000 = BigUInt("00000000000001000000000000", radix: 2)!;
let B00000000000010000000000000 = BigUInt("00000000000010000000000000", radix: 2)!;
let B00000000000100000000000000 = BigUInt("00000000000100000000000000", radix: 2)!;
let B00000000001000000000000000 = BigUInt("00000000001000000000000000", radix: 2)!;
let B00000000010000000000000000 = BigUInt("00000000010000000000000000", radix: 2)!;
let B00000000100000000000000000 = BigUInt("00000000100000000000000000", radix: 2)!;
let B00000001000000000000000000 = BigUInt("00000001000000000000000000", radix: 2)!;
let B00000010000000000000000000 = BigUInt("00000010000000000000000000", radix: 2)!;
let B00000100000000000000000000 = BigUInt("00000100000000000000000000", radix: 2)!;
let B00001000000000000000000000 = BigUInt("00001000000000000000000000", radix: 2)!;
let B00010000000000000000000000 = BigUInt("00010000000000000000000000", radix: 2)!;
let B00100000000000000000000000 = BigUInt("00100000000000000000000000", radix: 2)!;
let B01000000000000000000000000 = BigUInt("01000000000000000000000000", radix: 2)!;
let B10000000000000000000000000 = BigUInt("10000000000000000000000000", radix: 2)!;

